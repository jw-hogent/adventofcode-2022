import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test

internal class Day23Test {
    val smallSample = """
            .....
            ..##.
            ..#..
            .....
            ..##.
            .....
        """.trimIndent()

    val largerExample = """
        ..............
        ..............
        .......#......
        .....###.#....
        ...#...#.#....
        ....#...##....
        ...#.###......
        ...##.#.##....
        ....#..#......
        ..............
        ..............
        ..............
    """.trimIndent()

    @Test
    fun `small sample after one step`() {
        val expected = """
            ..##.
            .....
            ..#..
            ...#.
            ..#..
            .....
        """.trimIndent()
        val elves = Day23.createElves(smallSample)
        val newElves = elves.run()
        val bbox = Day23.BBox(0, 5, 0, 4)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `small sample after two steps`() {
        val expected = """
            .....
            ..##.
            .#...
            ....#
            .....
            ..#..
        """.trimIndent()
        val elves = Day23.createElves(smallSample)
        val newElves = elves.run().run()
        val bbox = Day23.BBox(0, 5, 0, 4)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `small sample after three steps`() {
        val expected = """
            ..#..
            ....#
            #....
            ....#
            .....
            ..#..
        """.trimIndent()
        val elves = Day23.createElves(smallSample)
        val newElves = elves.run().run().run()
        val bbox = Day23.BBox(0, 5, 0, 4)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example after one round`() {
        val expected = """
            ..............
            .......#......
            .....#...#....
            ...#..#.#.....
            .......#..#...
            ....#.#.##....
            ..#..#.#......
            ..#.#.#.##....
            ..............
            ....#..#......
            ..............
            ..............
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run()
        val bbox = Day23.BBox(0, 11, 0, 13)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example after two rounds`() {
        val expected = """
            ..............
            .......#......
            ....#.....#...
            ...#..#.#.....
            .......#...#..
            ...#..#.#.....
            .#...#.#.#....
            ..............
            ..#.#.#.##....
            ....#..#......
            ..............
            ..............
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run()
        val bbox = Day23.BBox(0, 11, 0, 13)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example after three rounds`() {
        val expected = """
            ..............
            .......#......
            .....#....#...
            ..#..#...#....
            .......#...#..
            ...#..#.#.....
            .#..#.....#...
            .......##.....
            ..##.#....#...
            ...#..........
            .......#......
            ..............
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run().run()
        val bbox = Day23.BBox(0, 11, 0, 13)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example after four rounds`() {
        val expected = """
            ..............
            .......#......
            ......#....#..
            ..#...##......
            ...#.....#.#..
            .........#....
            .#...###..#...
            ..#......#....
            ....##....#...
            ....#.........
            .......#......
            ..............
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run().run().run()
        val bbox = Day23.BBox(0, 11, 0, 13)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example after five rounds`() {
        val expected = """
            .......#......
            ..............
            ..#..#.....#..
            .........#....
            ......##...#..
            .#.#.####.....
            ...........#..
            ....##..#.....
            ..#...........
            ..........#...
            ....#..#......
            ..............
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run().run().run().run()
        val bbox = Day23.BBox(0, 11, 0, 13)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example after ten rounds`() {
        val expected = """
            .......#......
            ...........#..
            ..#.#..#......
            ......#.......
            ...#.....#..#.
            .#......##....
            .....##.......
            ..#........#..
            ....#.#..#....
            ..............
            ....#..#..#...
            ..............
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run().run().run().run().run().run().run().run().run()
        val bbox = Day23.BBox(0, 11, 0, 13)
        assertEquals(expected, newElves.toString(bbox))
    }

    @Test
    fun `larger example bbox after 10 runs`() {
        val expected = """
            ......#.....
            ..........#.
            .#.#..#.....
            .....#......
            ..#.....#..#
            #......##...
            ....##......
            .#........#.
            ...#.#..#...
            ............
            ...#..#..#..
        """.trimIndent()
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run().run().run().run().run().run().run().run().run()
        assertEquals(expected, newElves.toString(newElves.bbox()))
    }

    @Test
    fun `larger example empty tiles after 10 runs`() {
        val elves = Day23.createElves(largerExample)
        val newElves = elves.run().run().run().run().run().run().run().run().run().run()
        assertEquals(110, newElves.emptyGroundTilesIn(newElves.bbox()))
    }
}